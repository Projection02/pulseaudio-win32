From 28ca80a2cba72b74b9ddba9fb75ab1fbd7c8fe4c Mon Sep 17 00:00:00 2001
From: Patrick Gaskin <patrick@pgaskin.net>
Date: Wed, 21 Apr 2021 14:11:28 -0400
Subject: [PATCH] cli-command: Replace config dir with toplevel for .include on
  win32

This makes the behaviour match pa_{open,find}_config_file by
replacing PA_DEFAULT_CONFIG_DIR with the toplevel.

This fixes the hardcoded paths for {default,system}.pa.d introduced
in 45abd0b43c7901b375afcba6d9b0e1cca2f349a8 (!361).
---
 src/pulsecore/cli-command.c | 22 +++++++++++++++++++---
 1 file changed, 19 insertions(+), 3 deletions(-)

diff --git a/src/pulsecore/cli-command.c b/src/pulsecore/cli-command.c
index 5dc2ac6b9..2b5f60eed 100644
--- a/src/pulsecore/cli-command.c
+++ b/src/pulsecore/cli-command.c
@@ -2084,7 +2084,17 @@ int pa_cli_command_execute_line_stateful(pa_core *c, const char *s, pa_strbuf *b
 
             if (l == sizeof(META_INCLUDE)-1 && !strncmp(cs, META_INCLUDE, l)) {
                 struct stat st;
-                const char *filename = cs+l+strspn(cs+l, whitespace);
+                const char *fn = cs+l+strspn(cs+l, whitespace);
+
+                char *filename;
+#ifdef OS_IS_WIN32
+                if (strncmp(fn, PA_DEFAULT_CONFIG_DIR, strlen(PA_DEFAULT_CONFIG_DIR)) == 0)
+                    filename = pa_sprintf_malloc("%s" PA_PATH_SEP "etc" PA_PATH_SEP "pulse" PA_PATH_SEP "%s",
+                                            pa_win32_get_toplevel(NULL),
+                                            fn + strlen(PA_DEFAULT_CONFIG_DIR));
+                else
+#endif
+                filename = pa_xstrdup(fn);
 
                 if (stat(filename, &st) < 0) {
                     pa_log_warn("stat('%s'): %s", filename, pa_cstrerror(errno));
@@ -2096,8 +2106,10 @@ int pa_cli_command_execute_line_stateful(pa_core *c, const char *s, pa_strbuf *b
 
                         if (!(d = opendir(filename))) {
                             pa_log_warn("Failed to read '%s': %s", filename, pa_cstrerror(errno));
-                            if (*fail)
+                            if (*fail) {
+                                pa_xfree(filename);
                                 return -1;
+                            }
                         } else {
                             unsigned i, count;
                             char **sorted_files;
@@ -2143,13 +2155,17 @@ int pa_cli_command_execute_line_stateful(pa_core *c, const char *s, pa_strbuf *b
                                     pa_xfree(sorted_files[i]);
                                 }
                                 pa_xfree(sorted_files);
-                                if (failed)
+                                if (failed) {
+                                    pa_xfree(filename);
                                     return -1;
+                                }
                             }
                         }
                     } else if (pa_cli_command_execute_file(c, filename, buf, fail) < 0 && *fail) {
+                        pa_xfree(filename);
                         return -1;
                     }
+                    pa_xfree(filename);
                 }
             } else if (l == sizeof(META_IFEXISTS)-1 && !strncmp(cs, META_IFEXISTS, l)) {
                 if (!ifstate) {
-- 
2.31.0

